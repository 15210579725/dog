// Generated by gencpp from file unitree_legged_msgs/upstream.msg
// DO NOT EDIT!


#ifndef UNITREE_LEGGED_MSGS_MESSAGE_UPSTREAM_H
#define UNITREE_LEGGED_MSGS_MESSAGE_UPSTREAM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unitree_legged_msgs
{
template <class ContainerAllocator>
struct upstream_
{
  typedef upstream_<ContainerAllocator> Type;

  upstream_()
    : id()
    , mode()
    , Temp()
    , MError()
    , T()
    , W()
    , Pos()  {
      id.assign(0);

      mode.assign(0);

      Temp.assign(0);

      MError.assign(0);

      T.assign(0.0);

      W.assign(0.0);

      Pos.assign(0.0);
  }
  upstream_(const ContainerAllocator& _alloc)
    : id()
    , mode()
    , Temp()
    , MError()
    , T()
    , W()
    , Pos()  {
  (void)_alloc;
      id.assign(0);

      mode.assign(0);

      Temp.assign(0);

      MError.assign(0);

      T.assign(0.0);

      W.assign(0.0);

      Pos.assign(0.0);
  }



   typedef boost::array<uint8_t, 12>  _id_type;
  _id_type id;

   typedef boost::array<uint8_t, 12>  _mode_type;
  _mode_type mode;

   typedef boost::array<int8_t, 12>  _Temp_type;
  _Temp_type Temp;

   typedef boost::array<int8_t, 12>  _MError_type;
  _MError_type MError;

   typedef boost::array<float, 12>  _T_type;
  _T_type T;

   typedef boost::array<float, 12>  _W_type;
  _W_type W;

   typedef boost::array<float, 12>  _Pos_type;
  _Pos_type Pos;





  typedef boost::shared_ptr< ::unitree_legged_msgs::upstream_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unitree_legged_msgs::upstream_<ContainerAllocator> const> ConstPtr;

}; // struct upstream_

typedef ::unitree_legged_msgs::upstream_<std::allocator<void> > upstream;

typedef boost::shared_ptr< ::unitree_legged_msgs::upstream > upstreamPtr;
typedef boost::shared_ptr< ::unitree_legged_msgs::upstream const> upstreamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unitree_legged_msgs::upstream_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unitree_legged_msgs::upstream_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unitree_legged_msgs::upstream_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::upstream_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.mode == rhs.mode &&
    lhs.Temp == rhs.Temp &&
    lhs.MError == rhs.MError &&
    lhs.T == rhs.T &&
    lhs.W == rhs.W &&
    lhs.Pos == rhs.Pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unitree_legged_msgs::upstream_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::upstream_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unitree_legged_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::upstream_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::upstream_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::upstream_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::upstream_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::upstream_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::upstream_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unitree_legged_msgs::upstream_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9ff27940f26bc5c2d56544d9624426f3";
  }

  static const char* value(const ::unitree_legged_msgs::upstream_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9ff27940f26bc5c2ULL;
  static const uint64_t static_value2 = 0xd56544d9624426f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::unitree_legged_msgs::upstream_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unitree_legged_msgs/upstream";
  }

  static const char* value(const ::unitree_legged_msgs::upstream_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unitree_legged_msgs::upstream_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[12] id        \n"
"uint8[12] mode             \n"
"int8[12] Temp                    \n"
"int8[12] MError                   \n"
"float32[12] T                   \n"
"float32[12] W                     \n"
"float32[12] Pos                    \n"
;
  }

  static const char* value(const ::unitree_legged_msgs::upstream_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unitree_legged_msgs::upstream_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.mode);
      stream.next(m.Temp);
      stream.next(m.MError);
      stream.next(m.T);
      stream.next(m.W);
      stream.next(m.Pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct upstream_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unitree_legged_msgs::upstream_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unitree_legged_msgs::upstream_<ContainerAllocator>& v)
  {
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "mode[]" << std::endl;
    for (size_t i = 0; i < v.mode.size(); ++i)
    {
      s << indent << "  mode[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.mode[i]);
    }
    s << indent << "Temp[]" << std::endl;
    for (size_t i = 0; i < v.Temp.size(); ++i)
    {
      s << indent << "  Temp[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.Temp[i]);
    }
    s << indent << "MError[]" << std::endl;
    for (size_t i = 0; i < v.MError.size(); ++i)
    {
      s << indent << "  MError[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.MError[i]);
    }
    s << indent << "T[]" << std::endl;
    for (size_t i = 0; i < v.T.size(); ++i)
    {
      s << indent << "  T[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.T[i]);
    }
    s << indent << "W[]" << std::endl;
    for (size_t i = 0; i < v.W.size(); ++i)
    {
      s << indent << "  W[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.W[i]);
    }
    s << indent << "Pos[]" << std::endl;
    for (size_t i = 0; i < v.Pos.size(); ++i)
    {
      s << indent << "  Pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.Pos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITREE_LEGGED_MSGS_MESSAGE_UPSTREAM_H
