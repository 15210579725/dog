# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from unitree_legged_msgs/downstream.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class downstream(genpy.Message):
  _md5sum = "26889c43cbd16b0c939bfffe5f46adb2"
  _type = "unitree_legged_msgs/downstream"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8[12] id            
uint8[12] mode          
float32[12] T                      
float32[12] W                        
float32[12] Pos                    
float32[12] K_P                     
float32[12] K_W    """
  __slots__ = ['id','mode','T','W','Pos','K_P','K_W']
  _slot_types = ['uint8[12]','uint8[12]','float32[12]','float32[12]','float32[12]','float32[12]','float32[12]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,mode,T,W,Pos,K_P,K_W

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(downstream, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = b'\0'*12
      if self.mode is None:
        self.mode = b'\0'*12
      if self.T is None:
        self.T = [0.] * 12
      if self.W is None:
        self.W = [0.] * 12
      if self.Pos is None:
        self.Pos = [0.] * 12
      if self.K_P is None:
        self.K_P = [0.] * 12
      if self.K_W is None:
        self.K_W = [0.] * 12
    else:
      self.id = b'\0'*12
      self.mode = b'\0'*12
      self.T = [0.] * 12
      self.W = [0.] * 12
      self.Pos = [0.] * 12
      self.K_P = [0.] * 12
      self.K_W = [0.] * 12

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.id
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_12B().pack(*_x))
      else:
        buff.write(_get_struct_12s().pack(_x))
      _x = self.mode
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_12B().pack(*_x))
      else:
        buff.write(_get_struct_12s().pack(_x))
      buff.write(_get_struct_12f().pack(*self.T))
      buff.write(_get_struct_12f().pack(*self.W))
      buff.write(_get_struct_12f().pack(*self.Pos))
      buff.write(_get_struct_12f().pack(*self.K_P))
      buff.write(_get_struct_12f().pack(*self.K_W))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 12
      self.id = str[start:end]
      start = end
      end += 12
      self.mode = str[start:end]
      start = end
      end += 48
      self.T = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.W = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.Pos = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.K_P = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.K_W = _get_struct_12f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.id
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_12B().pack(*_x))
      else:
        buff.write(_get_struct_12s().pack(_x))
      _x = self.mode
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_12B().pack(*_x))
      else:
        buff.write(_get_struct_12s().pack(_x))
      buff.write(self.T.tostring())
      buff.write(self.W.tostring())
      buff.write(self.Pos.tostring())
      buff.write(self.K_P.tostring())
      buff.write(self.K_W.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 12
      self.id = str[start:end]
      start = end
      end += 12
      self.mode = str[start:end]
      start = end
      end += 48
      self.T = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.W = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.Pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.K_P = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.K_W = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12B = None
def _get_struct_12B():
    global _struct_12B
    if _struct_12B is None:
        _struct_12B = struct.Struct("<12B")
    return _struct_12B
_struct_12f = None
def _get_struct_12f():
    global _struct_12f
    if _struct_12f is None:
        _struct_12f = struct.Struct("<12f")
    return _struct_12f
_struct_12s = None
def _get_struct_12s():
    global _struct_12s
    if _struct_12s is None:
        _struct_12s = struct.Struct("<12s")
    return _struct_12s
